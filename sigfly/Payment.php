<?php
require_once $classesdir . 'lphp.php';

/** 
 * The skeleton for this class was autogenerated by Propel  on:
 *
 * [Tue Jan 31 10:11:39 2006]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.sigfly 
 */
class Payment extends BasePayment {
	
	private $_transactionResult = 'LIVE';
	
	// functions to force the result of transaction
	public function setTransactionResultLive() {
		// LIVE is the only non-test result
		$this->_transactionResult = 'LIVE';
	}
	public function setTransactionResultGood() {
		// test transaction to always return good result
		$this->_transactionResult = 'GOOD';
	}
	public function setTransactionResultDecline() {
		// test transaction to always return decline result
		$this->_transactionResult = 'DECLINE';
	}
	public function setTransactionResultDuplicate() {
		// test transaction to always return duplicate result
		$this->_transactionResult = 'DUPLICATE';
	}
	
	public function makeCCPayment($comment=null, $amount=null, $quantity=null) {
		global $classesdir;
		
		$User = $this->getUser();
		$PaymentMethod = $this->getPaymentMethod();
		
		if(!is_object($PaymentMethod)) {
			throw new Exception('PaymentMethod object not found. One must be specified before trying to process a payment.');
		}
		if(!is_object($User)) {
			throw new Exception('User object not found. One must be specified before trying to process a payment.');
		}
		
		
		if($comment === null) {
			$comment = 'no comment/description';
		}
		
		// amount????
		
		$this->setAmount($amount);
		if((int)$quantity === 0) {
			$quantity = 1;
		}
		$this->setQuantity($quantity);
		
		// save before the storm
		$this->setIsDeclined(0);
		$this->setIsPaid(0);
		$this->setIsRecurring(0);
		$this->save();
		
		$this->setOid(sprintf("%d-%d", $User->getId(), $this->getId()));
		
		$mylphp = new lphp;
	
		$myorder['host']       = 'secure.linkpt.net';
		$myorder['port']       = '1129';
		$myorder['keyfile']    = $classesdir . '998577.pem'; # Change this to the name and location of your certificate file 
		$myorder['configfile'] = '998577';        # Change this to your store number 
	
		$myorder['ordertype']         = 'SALE';
		$myorder['result']            = $this->_transactionResult; # LIVE or For test transactions, set to GOOD, DECLINE, or DUPLICATE
		$myorder['transactionorigin'] = 'ECI';           # For credit card retail txns, set to RETAIL, for Mail order/telephone order, set to MOTO, for e-commerce, leave out or set to ECI
		$myorder['oid']               = $this->getOid();  # Order ID number must be unique. If not set, gateway will assign one.
		$myorder['ponumber']          = $User->getId();
		$myorder['taxexempt']         = 'N';
		$myorder['terminaltype']      = 'UNSPECIFIED';    # Set terminaltype to POS for an electronic cash register or integrated POS system, STANDALONE for a point-of-sale credit card terminal, UNATTENDED for a self-service station, or UNSPECIFIED for e-commerce or other applications
		$myorder['ip']                = $_SERVER['REMOTE_ADDR'];
	
		$myorder['subtotal']    = sprintf("%.02f", $this->getAmount());
		$myorder['tax']         = '0.00';
		$myorder['shipping']    = '0.00';
		$myorder['vattax']      = '0.00';
		$myorder['chargetotal'] = sprintf("%.02f", $this->getAmount());
	
		# CARD INFO
		$myorder['cardnumber']   = $PaymentMethod->getNumber();
		$myorder['cardexpmonth'] = $PaymentMethod->getExpirationMonth();
		$myorder['cardexpyear']  = substr($PaymentMethod->getExpirationYear(), -2); // last 2 digits only
		$myorder['cvmindicator'] = 'provided';
		$myorder['cvmvalue']     = $PaymentMethod->getCcv();
	
		$addrnum = $PaymentMethod->getAddressline1();
		$addrnum = trim(substr($addrnum, 0, strpos($addrnum, ' ')));
		
		# BILLING INFO
		$myorder['name']     = $PaymentMethod->getName();
		$myorder['company']  = $User->getCompanyName();
		$myorder['address1'] = $PaymentMethod->getAddressline1();
		$myorder['address2'] = $PaymentMethod->getAddressline2();
		$myorder['city']     = $PaymentMethod->getCity();
		$myorder['state']    = $PaymentMethod->getState();
		$myorder['country']  = 'US';
		$myorder['phone']    = $PaymentMethod->getTelephoneDay();
		$myorder['fax']      = '';
		$myorder['email']    = $User->getEmail();
		$myorder['addrnum']  = $addrnum;   # Required for AVS. If not provided, transactions will downgrade.
		$myorder['zip']      = $PaymentMethod->getPostcode(); # Required for AVS. If not provided, transactions will downgrade.
	
		# SHIPPING INFO
		$myorder['sname']     = $PaymentMethod->getName();
		$myorder['saddress1'] = $PaymentMethod->getAddressline1();
		$myorder['saddress2'] = $PaymentMethod->getAddressline2();
		$myorder['scity']     = $PaymentMethod->getCity();
		$myorder['sstate']    = $PaymentMethod->getState();
		$myorder['szip']      = $PaymentMethod->getPostcode();
		$myorder['scountry']  = 'US';
	
		# ITEMS AND OPTIONS
		$items = array (
			'id' 			=> $this->getOid(),
			'description' 	=> $this->getComment(),
			'quantity' 		=> $this->getQuantity(),
			'price'			=> sprintf("%.02f", $this->getAmount()/$this->getQuantity()),
//			'options' => array
//					(
//					'name' => 'Color',
//					'value'=> 'Red'
//					),
//			'options2' => array
//					(
//					'name' => 'Size',
//					'value' => 'XL'
//					)
			);
	
		$myorder['items'][0] = $items; # put array of items into hash
	
		# you could also submit this same item w/ options like this:
	/*	
		$myorder['items'][item1]['id']          = '123456-A98765';
		$myorder['items'][item1]['description'] = 'Logo T-Shirt';
		$myorder['items'][item1]['quantity']    = '1';
		$myorder['items'][item1]['price']       = '12.99';
	
			# pass options in like this:
			$myorder['items'][item1]['option1']['name']  = 'Color';
			$myorder['items'][item1]['option1']['value'] = 'Red';
			$myorder['items'][item1]['option2']['name']  = 'Size';
			$myorder['items'][item1]['option2']['value'] = 'XL';
	
			# or you could alternately pass the same options in like this:
	#		$myorder['items'][item1][0]['name']  = 'Color';
	#		$myorder['items'][item1][0]['value'] = 'Red';
	#		$myorder['items'][item1][1]['name']  = 'Size';
	#		$myorder['items'][item1][1]['value'] = 'XL';
	*/
	
	
		# MISC
		$myorder['comments'] = $this->getComment();
	//	$myorder['referred'] = 'Saw ad on Web site.';
	//	$myorder['debugging'] = 'true';  # for development only - not intended for production use
		
	
		if ($amount > 0) {
		  # Send transaction. Use one of two possible methods  #
		//	$result = $mylphp->process($myorder);       # use shared library model
			$result = $mylphp->curl_process($myorder);  # use curl methods
			
		} else {
			// this is a credit to the account... probably. don't charge cc
			$result['r_approved'] = 'APPROVED';
			$result['r_code'] = 'NA';
			$result['r_ordernum'] = $this->getOid();
		}
		
		ob_start();
		
		vdump($myorder);
		vdump($result);
		
		$cc_out = ob_get_contents();
		ob_end_clean();
		file_put_contents('/tmp/zgrc_'.time(), $cc_out);
	
	
		if ($result['r_approved'] != 'APPROVED')	// transaction failed, print the reason
		{
			$error = 'Status: '.$result['r_approved'];
			$error.= '; Error: '.$result['r_error'];
			
			// save here anyway... show decline
			$this->setIsPaid(0);
			$this->setIsDeclined(1);
			
			$this->setComment(sprintf("(declined: %s) %s", $result['r_error'], $this->getComment()));
			
			$this->save();
			
			throw new Exception($error);
			
		}
		else
		{					// success
		//	print 'Status: '.$result[r_approved];
			if(strlen($result['r_code'])) {
				$this->setCode($result['r_code']);
			}
			if(strlen($result['r_ordernum'])) {
				$this->setOid($result['r_ordernum']);
			}
			
			$this->setDatePaid(time());
			$this->setIsPaid(1);
			
			$this->save();
			
//			vdump($result);
			
			return true;
		}
	} // end makePayment function

	
	public function save(PropelPDO $conn = null) {
		
		if($this->isNew()) {
			$this->setIsActive(1);
			$this->setDateCreated(time());
			$this->setRemoteAddr($_SERVER['REMOTE_ADDR']);
		}
//		if($this->isModified()) {
//			$this->setDateModified(time());
//			$this->setRemoteAddr($_SERVER['REMOTE_ADDR']);
//		}
		
		parent::save($conn);
	}
}
