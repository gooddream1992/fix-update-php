<?php
require_once 'komideals/om/BaseImage.php';

/** 
 * The skeleton for this class was autogenerated by Propel  on:
 *
 * [Wed Feb 15 18:00:59 2006]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package komideals 
 */
class Image extends BaseImage {
	
	private $_formErrors = array();
	private $_formMessages = array();
	private $_requiredImageHeight = 0;
	private $_requiredImageWidth = 0;
	
	public function setFormMessageKey($key, $value) {
		$this->_formMessages[$key] = $value;
	}
	public function setFormMessage($value) {
		$this->_formMessages[] = $value;
	}
	public function unsetFormMessages() {
		$this->_formMessages = array();
	}
	
	public function setFormErrorKey($key, $value) {
		$this->_formErrors[$key] = $value;
	}
	public function setFormError($value) {
		$this->_formErrors[] = $value;
	}
	public function unsetFormErrors() {
		$this->_formErrors = array();
	}
	
	public function getFormErrors() {
		return $this->_formErrors;
	}
	public function getFormError($key) {
		return $this->_formErrors[$key];
	}
	public function getFormMessages() {
		return $this->_formMessages;
	}
	public function getFormMessage($key) {
		return $this->_formMessages[$key];
	}
	
	public function setRequiredImageHeight($v) {
		$this->_requiredImageHeight = (int)$v;
	}
	public function setRequiredImageWidth($v) {
		$this->_requiredImageWidth = (int)$v;
	}
	public function getRequiredImageHeight() {
		return $this->_requiredImageHeight;
	}
	public function getRequiredImageWidth() {
		return $this->_requiredImageWidth;
	}
	
	public function setFieldsFromArray($a, $field_prefix = '') {
		
		$tableMap = ImagePeer::getTableMap();
//		$tableMap = ImagePeer::getMapBuilder()->getDatabaseMap()->getTable(ImagePeer::TABLE_NAME );
		$colName = $tableMap->getColumn(ImagePeer::CONTENT )->getColumnName();
		
		
		if (isset($a[$field_prefix.$colName])) {
			$uf = $a[$field_prefix.$colName];
			
		} else {
			// nothing to do.
			return true;
		}
		
		if(isset($uf['error']) && $uf['error'] != 0) {
			switch ($uf['error']) {
				case UPLOAD_ERR_INI_SIZE:
					$this->setFormError("The uploaded file exceeds the upload_max_filesize directive (".ini_get("upload_max_filesize").") in php.ini.");
					return false;
					break;
				
				case UPLOAD_ERR_FORM_SIZE:
					$this->setFormError("The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.");
					return false;
					break;
				
				case UPLOAD_ERR_PARTIAL:
					$this->setFormError("The uploaded file was only partially uploaded.");
					return false;
					break;
				
				case UPLOAD_ERR_NO_FILE:
					if($this->isNew()) {
						$this->setFormError("No file was uploaded.");
						return false;
					} else {
						return true;
					}
					break;
				
				case UPLOAD_ERR_NO_TMP_DIR:
					$this->setFormError("Missing a temporary folder.");
					return false;
					break;
				
				default:
					$this->setFormError("An unknown file upload error occured");
					return false;
			}
		}
		
//		$_FILES['userfile']['name']
//		$_FILES['userfile']['type']
//		$_FILES['userfile']['size']
//		$_FILES['userfile']['tmp_name']
//		$_FILES['userfile']['error']

		if( ! $file_contents = @file_get_contents($uf['tmp_name'])) {
			$this->setFormError('Could not open temp image file.');
			return false;
		}
		
		$this->setFileName($uf['name']);
		$this->setContentSize($uf['size']);
		
		$this->setContent($file_contents);
		/* @var $clob Clob */
//		$clob = $this->getContent();
//		$clob->adf
		
		$file_getimagesize = getimagesize($uf['tmp_name']);
//		array(7) {
//		  [0]=>
//		  int(281)
//		  [1]=>
//		  int(63)
//		  [2]=>
//		  int(1)
//		  [3]=>
//		  string(23) "width="281" height="63""
//		  ["bits"]=>
//		  int(7)
//		  ["channels"]=>
//		  int(3)
//		  ["mime"]=>
//		  string(9) "image/gif"
//		}
		$this->setHeight($file_getimagesize[1]);
		$this->setWidth($file_getimagesize[0]);
		$this->setContentType($file_getimagesize['mime']);
		
		return true;
	}
	
	public function getForm($field_prefix = '') {
		
		$tableMap = ImagePeer::getTableMap();
//		$tableMap = ImagePeer::getMapBuilder()->getDatabaseMap()->getTable(ImagePeer::TABLE_NAME );		
		
		if (count($this->getFormErrors()) > 0) {
			$output .= sprintf("<tr><td colspan=\"2\" class=\"mainText\" valign=\"top\" style=\"border: 15px solid red; padding: 10px\"><li>%s</td></tr>\n", implode(' <li>', $this->getFormErrors()));
		}
		
		if (count($this->getFormMessages()) > 0) {
			$output .= sprintf("<tr><td colspan=\"2\" class=\"mainText\" valign=\"top\" style=\"border: 15px solid green; padding: 10px\"><li>%s</td></tr>\n", implode(' <li>', $this->getFormMessages()));
		}
		
		
		
		// 
		// ============================================
		$thisColumn = $tableMap->getColumn(ImagePeer::CONTENT );
		$output .= '
		<tr>
		<input type="hidden" name="MAX_FILE_SIZE" value="80000" />
			<td width="45%" style="padding-left:10pt" valign="top">
				<b>Image:</b><sup>*</sup>
				<br> (browse and select a file on your hard drive.
				<br> gif, jpeg and png files are supported only.
				<br> Maximum file size allowed: 65 kb )
			</td>
			<td valign="top">
			';
		
				$function_name = 'get' . $thisColumn->getPhpName();
				$output .= sprintf("<input type=\"file\" value=\"%s\" name=\"%s\" size=\"25\" accept=\"image/*\">", 
					'', 
					$field_prefix . $thisColumn->getColumnName()
					);
				if($this->getFormError($thisColumn->getColumnName())) {
					$output .= ' <span class="mainText" style="color: #ff0000;">Attention required.</span>';
				}
				
				if( ! $this->isNew()) {
					// show preview icon if already in database
					// set max height/width no bigger than 200h or 300w whichever is max. 
					// retaining ratio
//					$imgDims = $this->_scale_image(
//						array('h'=>$this->getHeight(), 'w'=>$this->getWidth()), 
//						array('h'=>200, 'w'=>300));
//						
//					$output .= sprintf("\n<br><img src=\"%s?page=image/view&id=%d\" height=\"%d\" width=\"%d\" border=\"0\" alt=\"%s\">\n", 
//						$_SERVER['SCRIPT_NAME'], $this->getId(), $imgDims['h'], $imgDims['w'], htmlspecialchars($this->getFileName()));

					$output .= '<br>' . $this->getImgTag(0, null, 200, 350, true);
					
				}
				
		$output .= '
			</td>
		</tr>
		<tr><td colspan="2"><hr size="1" noshade style="color: #E0E0E0; background-color: #E0E0E0;"></td></tr>
		';
		
		
		
		/*
		// notes
		// ============================================
		$output .= '
		<tr>
			<td colspan="2" nowrap valign="top" style="padding-left:10pt" bgcolor="f5f5f5">
				<em>Notes:</em> By submitting this information, you agree to be billed a recurring monthly charge of [monthly_charge]
				until you cancel your account.
			</td>
		</tr>
		<tr><td colspan="2"><hr size="1" noshade style="color: #E0E0E0; background-color: #E0E0E0;"></td></tr>
		';
		*/
		
		
		
		// ============================================
		return $output;

	}

	private function _image_server_error($img_file, $status_code='503') {
		header("HTTP/1.1 $status_code Internal Server Error");
		header("Content-type: image/gif");
		readfile("/var/www/imagehosting/images/".$img_file);
		exit;
	}
	
	function outputImage($download = false) {

		if(!empty($HTTP_SERVER_VARS["HTTP_IF_MODIFIED_SINCE"])) {
			header("HTTP/1.1 304 Not Modified");
			header("Content-Length: 0");
			exit;
		}
		
		if($download == true) {
			
			$file_name = sprintf("%s-%s", $this->getUser()->getWilshireUsername(), $this->getFileName());
	
			header(sprintf("Content-Disposition: attachment; filename=\"%s\"", $file_name));
			header("Content-Type: application/octet-stream");
			
		} else {
			
			$this->setDateViewed(time());
			$this->save();
	
			header( "Content-type: ". $this->getContentType());
		}
		
		// Last-Modified: Thu, 10 May 2001 06:39:18 GMT
		header( sprintf("Last-Modified: %s GMT",date("D, d M Y H:i:s", $this->getDateCreated())));
		
		echo $this->getContent()->getContents();
		flush();
		
		exit;
		
	}
	
	private function _scale_image($imgArr, $scaleArr) {
		// Arr = array('h' => n, 'w', n)
		
		if($imgArr['h'] <= $scaleArr['h'] && $imgArr['w'] <= $scaleArr['w']) {
			// img dims are within limits
			return $imgArr;
		}
		
		if($imgArr['h'] > $scaleArr['h']) {
			// scale down h
			$ret['h'] = $scaleArr['h'];
			$ret['w'] = intval($scaleArr['h'] * ($imgArr['w'] / $imgArr['h']));
			return $this->_scale_image($ret, $scaleArr);
		}
		
		if($imgArr['w'] > $scaleArr['w']) {
			// scale down w
			$ret['w'] = $scaleArr['w'];
			$ret['h'] = intval($scaleArr['w'] * ($imgArr['h'] / $imgArr['w']));
			return $this->_scale_image($ret, $scaleArr);
		}
		
		throw new Exception('Fatal error while trying to scale down image.');		
	}
	
	public function getFormHeader() {

		$output = '<table width="100%" border="0" align="center" cellspacing="0" cellpadding="1" class="mainText">';
		
		$output .= '
		<tr>
			<td colspan="2">
				<b>Upload Image</b>&nbsp;&nbsp;Starred (*) fields are required
				<hr size="1" noshade> 
			</td>
		</tr>
		';
		
		
		return $output;
	}
	
	public function getFormFooter() {
		
		// submit it.
		// ============================================
		$output .= '
		</table>
		<br />
		
		<input type="submit"  value="Upload Image">
		';
		
		
		return $output;
	}
	
	public function validate_image() {
		
		$tableMap = ImagePeer::getTableMap();
//		$tableMap = ImagePeer::getMapBuilder()->getDatabaseMap()->getTable(ImagePeer::TABLE_NAME );
		
//		$allowed_fields[$tableMap->getColumn(ImagePeer::MEDIA_NAME )->getColumnName()] 	= $tableMap->getColumn(ImagePeer::MEDIA_NAME 	)->getPhpName();
//		$allowed_fields[$tableMap->getColumn(ImagePeer::DISPLAY_URL )->getColumnName()] 	= $tableMap->getColumn(ImagePeer::DISPLAY_URL )->getPhpName();
//		$allowed_fields[$tableMap->getColumn(ImagePeer::CLICK_URL )->getColumnName()] 	= $tableMap->getColumn(ImagePeer::CLICK_URL 	)->getPhpName();
//		$allowed_fields[$tableMap->getColumn(ImagePeer::HEADING )->getColumnName()] 		= $tableMap->getColumn(ImagePeer::HEADING 	)->getPhpName();
//		$allowed_fields[$tableMap->getColumn(ImagePeer::DESCRIPTION )->getColumnName()] 	= $tableMap->getColumn(ImagePeer::DESCRIPTION )->getPhpName();
		
//		if(strlen($this->getMediaName()) < 1) {
//			$this->setFormErrorKey($tableMap->getColumn(ImagePeer::MEDIA_NAME )->getColumnName() , 'Ad Name is a required field.');
//		}
//		if(strlen($this->getDisplayUrl()) < 1) {
//			$this->setFormErrorKey($tableMap->getColumn(ImagePeer::DISPLAY_URL )->getColumnName() , 'Display URL is a required field.');
//		}
//		if(strlen($this->getHeading()) < 1) {
//			$this->setFormErrorKey($tableMap->getColumn(ImagePeer::HEADING )->getColumnName() , 'Heading is a required field.');
//		}
//		if(strlen($this->getDescription()) < 1) {
//			$this->setFormErrorKey($tableMap->getColumn(ImagePeer::DESCRIPTION  )->getColumnName() , 'Description is a required field.');
//		}


		if($this->getRequiredImageHeight() > 0 && $this->getRequiredImageHeight() != $this->getHeight()) {
			$this->setFormError(sprintf("Your image Height of %d does not match the required image Height of %d.", $this->getHeight(), $this->getRequiredImageHeight()));
		}

		if($this->getRequiredImageWidth() > 0 && $this->getRequiredImageWidth() != $this->getWidth()) {
			$this->setFormError(sprintf("Your image Width of %d does not match the required image Width of %d.", $this->getWidth(), $this->getRequiredImageWidth()));
		}
		
		if( count($this->getFormErrors()) ) {
			return false;
		} else {
			return true;
		}
	}
	
	public function getImgTag($border=0, $href=null, $scaleH=0, $scaleW=0, $secure=false) {
		
		if($scaleH > 0 && $scaleW == 0) {
			$scaleW = time(); // something huge
		}
		if($scaleW > 0 && $scaleH == 0) {
			$scaleH = time(); // something huge
		}
		
		if($scaleH > 0) {
			$imgDims = $this->_scale_image(
				array('h'=>$this->getHeight(), 'w'=>$this->getWidth()), 
				array('h'=>$scaleH, 'w'=>$scaleW));
				
		} else {
			$imgDims = array('h'=>$this->getHeight(), 'w'=>$this->getWidth());
		}
		
		$ret = sprintf("<img src=\"%s\" height=\"%d\" width=\"%d\" border=\"%d\" alt=\"%s\">", 
			$this->getImgUrl($secure), $imgDims['h'], $imgDims['w'], $border, htmlspecialchars($this->getFileName()));
		
		if($href !== null) {
			$ret = sprintf("<a href=\"%s\">%s</a>", $href, $ret);
		}
		
		return $ret;
	}
	
	public function getImgUrl($secure=false, $download=false) {
		
		$ret = sprintf("http%s://%s/image-view.htm?id=%d%s", 
			($secure === true)? 's': '', $_SERVER['HTTP_HOST'], $this->getId(), ($download === true)?'&download=1':'');
		
		return $ret;
	}
	
	public function save(PropelPDO $conn = null) {
		
		if($this->isNew()) {
			$this->setIsActive(1);
			$this->setIsApproved(0);
			$this->setDateCreated(time());
			$this->setRemoteAddrCreated($_SERVER['REMOTE_ADDR']);
			
		}
		
		parent::save($conn);
	}

}
