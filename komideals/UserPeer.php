<?php
// The parent class
require_once 'komideals/om/BaseUserPeer.php';

// The object class
include_once 'komideals/User.php';

/** 
 * The skeleton for this class was autogenerated by Propel on:
 *
 * [Tue Jan 31 10:11:39 2006]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 *
 * @package komideals 
 */
class UserPeer extends BaseUserPeer {
	
	public static function getReplacementFields() {
//		$fields = self::getPhpNameMap();
		$field_names = self::getFieldNames();
		$fields = array();
		foreach ($field_names as $name) {
			$fields[$name] = self::translateFieldName($name, BasePeer::TYPE_PHPNAME, BasePeer::TYPE_RAW_COLNAME);
		}
		$fields['EmailHash'] = 'EMAIL_HASH';
		
		return $fields;
	}
	
	public static function verifyEmail($id, $hash) {
		$user = UserPeer::retrieveByPK((int)$id);
		
		if($user === null) {
			throw new Exception('Invalid Key Id supplied.');
		}
		if(!$user->isValidEmailHash($hash)) {
			throw new Exception('Invalid Key for supplied Id.');
		}
		
		$user->setIsEmailVerified(1);
		$user->save();
		
		return true;
	}
	
	public static function validateEmailByRegex($email) {
		if(!ereg(RX_EMAIL_ADDRESS_C, $email)) {
				return FALSE;
		}
		return TRUE;
	}

	public static function checkEmail($email) {
		
		$errors = array();

		// check if email exists...
		$crit = new Criteria();
		$crit->add(UserPeer::EMAIL, $email, Criteria::EQUAL );
		$existingUser = UserPeer::doSelectOne($crit);
		
		if($existingUser != null) {
			$errors[] = 'The email you entered already exists.';
			$errors[] = 'Only one account per email is allowed.';
			$errors[] = sprintf("If you misplaced or forgot your password, please visit our <a href=\"%s?page=help/lost_password\">password recovery page</a>.", $_SERVER['SCRIPT_NAME']);
//			$errors[] = '(See site map for link if needed.)';
			
		// regex not working quite right
//		} elseif(!self::validateEmailByRegex($email)) {
//			$errors[] = 'Bad or incorrect email address.';
			
//		} elseif(strtolower($email) != escape_bad_words(strtolower($email))) {
//			$errors[] = 'Email address contains one or more bad words.';

		}
		
		if($errors) {
			throw new Exception(implode(' ', $errors));
		}
		
		return true;
	}
	
	public static function doSendActivationEmail($email) {
		
		// check if email exists...
		$crit = new Criteria();
		$crit->add(UserPeer::EMAIL, $email, Criteria::EQUAL );
		$existingUser = UserPeer::doSelectOne($crit);
		
		if($existingUser === null) {
			throw new Exception('No account found with supplied email.');
		}
		
		if($existingUser->getIsEmailVerified() == '1') {
			throw new Exception('Account email is already verified or no account found with supplied email.');
		}
		
		$existingUser->sendActivationEmail();
		
		return true;
	}
	
	public static function doSendPasswordResetEmail($email) {
		
		// check if email exists...
		$crit = new Criteria();
		$crit->add(UserPeer::EMAIL, $email, Criteria::EQUAL );
		$existingUser = UserPeer::doSelectOne($crit);
		
		if($existingUser === null) {
			throw new Exception('No account found with supplied email.');
		}
		
//		if(strlen($existingUser->getPasswordResetHash())) {
//			throw new Exception('Account has already been sent password reset instructions.');
//		}
		
		$existingUser->sendPasswordResetEmail();
		$existingUser->save();
		
		return true;
	}
	
	public static function doResetPasswordWithHash($id, $password_reset_hash, $password1, $password2) {

		$existingUser = UserPeer::retrieveByPK((int)$id);
		
		if($existingUser === null) {
			throw new Exception('Could not save new password.  Invalid ID supplied.');
		}
		
//		if(!strlen($existingUser->getPasswordResetHash())) {
//			throw new Exception('No instructions sent to email account or password already reset.  You must send password instructions first.');
//		}
		
		$existingUser->resetPasswordWithHash($password_reset_hash, $password1, $password2);
		$existingUser->save();
		
		return true;
	}
	
	private static function _critNoWilshire($dbName = null) {
		require_once 'komideals/PaymentMethodPeer.php';
		
		$crit = new Criteria($dbName);
		$crit->add(UserPeer::WILSHIRE_USERNAME , '', Criteria::EQUAL );
		$crit->add(UserPeer::WILSHIRE_PASSWORD , '', Criteria::EQUAL );
		$crit->add(UserPeer::IS_ACTIVE , 1, Criteria::EQUAL );
		$crit->addAscendingOrderByColumn(UserPeer::DATE_CREATED );
		$crit->setDistinct();
		
		// must have credit card on file.
		$crit->addJoin(UserPeer::ID , PaymentMethodPeer::USER_ID );
		$crit->add(PaymentMethodPeer::EXPIRATION_MONTH , 0, Criteria::GREATER_THAN );
		
		return $crit;
	}
	public static function getNoWilshire($limit = 10, $dbName = null) {
		$crit = self::_critNoWilshire($dbName);
		if((int)$limit > 0) {
			$crit->setLimit($limit);
		}
		$UsersNeedWilshire = UserPeer::doSelect($crit);
		return $UsersNeedWilshire;
	}
	public static function countNoWilshire($dbName = null) {
		$crit = self::_critNoWilshire($dbName);
		$countUsersNeedWilshire = UserPeer::doCount($crit, true);
		return (int)$countUsersNeedWilshire;
	}
	
	private static function _critExpiring($dbName = null) {
		$crit = new Criteria();
		$crit->add(UserPeer::IS_ACTIVE , 1, Criteria::EQUAL );
		$crit->addAscendingOrderByColumn(UserPeer::DATE_EXPIRES );
		return $crit;
	}
	public static function getExpiring($limit = 10, $dbName = null) {
		$crit = self::_critExpiring($dbName);
		if((int)$limit > 0) {
			$crit->setLimit($limit);
		}
		$UsersExpiring = UserPeer::doSelect($crit);
		return $UsersExpiring;
	}
	public static function countExpiring($dbName = null) {
		$crit = self::_critExpiring($dbName);
		$countUsersExpiring = UserPeer::doCount($crit, true);
		return (int)$countUsersExpiring;
	}
	
	private static function _critExpired($dbName = null) {
		$crit = new Criteria();
		$crit->add(UserPeer::IS_ACTIVE , 1, Criteria::EQUAL );
		$crit->add(UserPeer::DATE_EXPIRES , time(), Criteria::LESS_EQUAL );
		$crit->addAscendingOrderByColumn(UserPeer::DATE_EXPIRES );
		return $crit;
	}
	public static function getExpired($limit = 10, $dbName = null) {
		$crit = self::_critExpired($dbName);
		if((int)$limit > 0) {
			$crit->setLimit($limit);
		}
		$UsersExpired = UserPeer::doSelect($crit);
		return $UsersExpired;
	}
	public static function countExpired($dbName = null) {
		$crit = self::_critExpired($dbName);
		$countUsersExpired = UserPeer::doCount($crit, true);
		return (int)$countUsersExpired;
	}
	
}
