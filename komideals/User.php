<?php
require_once 'komideals/om/BaseUser.php';
require_once 'komideals/PaymentPeer.php';
require_once 'komideals/PaymentMethodPeer.php';
require_once 'komideals/ZipcodePeer.php';
require_once 'komideals/UserNotePeer.php';

/** 
 * The skeleton for this class was autogenerated by Propel  on:
 *
 * [Tue Jan 31 10:11:39 2006]
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package komideals 
 */
class User extends BaseUser {
	
	private $_defaultPassword = '_default_password_12779';
	private $_defaultPaymentMethod = null;
	private $_defaultBusiness = null;
	
	private $_formErrors = array();
	private $_formMessages = array();
	
	public function setFormMessageKey($key, $value) {
		$this->_formMessages[$key] = $value;
	}
	public function setFormMessage($value) {
		$this->_formMessages[] = $value;
	}
	public function unsetFormMessages() {
		$this->_formMessages = array();
	}
	
	public function setFormErrorKey($key, $value) {
		$this->_formErrors[$key] = $value;
	}
	public function setFormError($value) {
		$this->_formErrors[] = $value;
	}
	public function unsetFormErrors() {
		$this->_formErrors = array();
	}
	
	public function getFormErrors() {
		return $this->_formErrors;
	}
	public function getFormError($key) {
		return $this->_formErrors[$key];
	}
	public function getFormMessages() {
		return $this->_formMessages;
	}
	public function getFormMessage($key) {
		return $this->_formMessages[$key];
	}
	/**
	 * Returns click & commission stats for stated period and range
	 * 
	 * @see DealFeedClickQuery::getClickStatsLastDays
	 * @see DealFeedCommissionQuery::getCommissionStatsLastDays
	 * 
	 * @param string $strRange [month/week]
	 * @param string $strTrend [clicks/commission]
	 * @param string $strPeriod [this_period/last_period/last_days/hourly_trends]
	 * @return array
	 */
	public function getStats($strRange='month', $strTrend='clicks', $strPeriod='last_days') {
	
		switch ($strRange) {
			case 'month':
				$strCleanRange = 'month';
			break;
			default:
				$strCleanRange = 'week';
			break;
		}
		switch ($strTrend) {
			case 'clicks':
				$fncPartTrend = 'Click';
			break;
			default: // sales, commission
				$fncPartTrend = 'Commission';
			break;
		}
		switch ($strPeriod) {
			case 'last_period':
				$fncPartPeriod = 'LastPeriod';
			break;
			case 'this_period':
				$fncPartPeriod = 'ThisPeriod';
			break;
			case 'hourly_trends':
				$fncPartPeriod = 'HourlyTrends';
			break;
			default: // last_days
				$fncPartPeriod = 'LastDays';
			break;
		}
		
		$ret = null;
		$function_name = sprintf("\$ret = DealFeed%sQuery::get%sStats%s(\$this, '%s');", $fncPartTrend, $fncPartTrend, $fncPartPeriod, $strCleanRange);
		eval($function_name);
		
		return $ret;
	}
	
	public function doReplaceFields($string) {
		$ReplaceFields = $this->getPeer()->getReplacementFields();
		
		foreach ($ReplaceFields as $phpName => $dbName) {
			$callback = sprintf("get%s", $phpName);
			$find_string = sprintf("[%s]", $dbName);
			$string = str_replace($find_string, $this->$callback(), $string);
		}
		return $string;
	}
	
	public function setFieldsFromDefaultPaymentMethod() {
		
		if( ! strlen($this->getAddressline1())) {
			$this->setAddressline1($this->getDefaultPaymentMethod()->getAddressline1());
		}
		if( ! strlen($this->getAddressline2())) {
			$this->setAddressline2($this->getDefaultPaymentMethod()->getAddressline2());
		}
		if( ! strlen($this->getCity())) {	
			$this->setCity($this->getDefaultPaymentMethod()->getCity());
		}
		if( ! strlen($this->getState())) {	
			$this->setState($this->getDefaultPaymentMethod()->getState());
		}
		if( ! strlen($this->getPostcode())) {	
			$this->setPostcode($this->getDefaultPaymentMethod()->getPostcode());
		}
		if( ! strlen($this->getTelephone())) {	
			$this->setTelephone($this->getDefaultPaymentMethod()->getTelephoneDay());
		}
		if( ! strlen($this->getFax())) {	
			$this->setFax($this->getDefaultPaymentMethod()->getTelephoneEve());
		}
		
		$name = $this->getDefaultPaymentMethod()->getName();
		$fname = trim(substr($name, 0, strpos($name, ' ')));
		$lname = trim(substr($name, strpos($name, ' ')-strlen($name)));
		
		if( ! strlen($this->getFname())) {	
			$this->setFname($fname);
		}
		if( ! strlen($this->getLname())) {
			$this->setLname($lname);
		}
		
		return true;
	}
	
	public function makeCCPayment($comment=null, $amount=null, $quantity=null) {
		
		$Payment = new Payment();
		
		$Payment->setUser($this);
		$Payment->setPaymentMethod($this->getDefaultPaymentMethod());
	
		// debugging
		// always a XYZ result...
//		$Payment->setTransactionResultDuplicate();
//		$Payment->setTransactionResultDecline();
//		$Payment->setTransactionResultGood();

		// not debugging (default)
//		$Payment->setTransactionResultLive();
		
		$Payment->makeCCPayment($comment, $amount, $quantity);
		$Payment->save();
		
		// days per month * seconds per day * months to add
		$secondsToAdd = intval(30.4375 * 86400 * (int)$quantity);
		$this->setDateExpires($this->getDateExpires('U') + $secondsToAdd);
		
		if($this->getDateExpires('U') > time()) {
			$this->setIsActive(1);
		}
		
		return true;
	}
	
	public function setSecurityObjectAccessBySecurityObjectId($SecurityObjectId, User $AdminUser) {
		require_once 'komideals/SecurityObjectPeer.php';
		
		$SecurityObject = SecurityObjectPeer::retrieveByPK($SecurityObjectId);
		return $this->setSecurityObjectAccess($SecurityObject, $AdminUser);
	}
	
	public function setSecurityObjectAccess(SecurityObject $SecurityObject, User $AdminUser) {
		require_once 'komideals/UserSecurityObjectPeer.php';
		
		if(is_object($this->getUserSecurityObjectRelatedBySecurityObject($SecurityObject))) {
			throw new Exception('Security Object already exists for specified user.  Cannot create duplicate Object Access.');
		}
		
		$UserSecurityObject = new UserSecurityObject();
		$UserSecurityObject->setSecurityObject($SecurityObject);
		$UserSecurityObject->setUserRelatedByAssignedByUserId($AdminUser);
		$UserSecurityObject->setUserRelatedByUserId($this);
		$UserSecurityObject->save();
		return true;
	}
	
	public function deleteSecurityObjectAccessBySecurityObjectId($SecurityObjectId) {
		require_once 'komideals/SecurityObjectPeer.php';
		
		$SecurityObject = SecurityObjectPeer::retrieveByPK($SecurityObjectId);
		return $this->deleteSecurityObjectAccess($SecurityObject);
	}
	
	public function deleteSecurityObjectAccess(SecurityObject $SecurityObject) {
		$UserSecurityObject = $this->getUserSecurityObjectRelatedBySecurityObject($SecurityObject);
		if (is_null($UserSecurityObject)) {
			throw new Exception('Could not remove access to object: '. $SecurityObject->getName() .'.  Access has probably aready been removed.');
		}
		$UserSecurityObject->delete();
		return true;
	}
	
	public function getUserSecurityObjectRelatedBySecurityObject(SecurityObject $SecurityObject) {
		require_once 'komideals/UserSecurityObjectPeer.php';
		
		$crit = new Criteria();
		$crit->add(UserSecurityObjectPeer::SECURITY_OBJECT_ID , $SecurityObject->getId(), Criteria::EQUAL );
		$crit->add(UserSecurityObjectPeer::USER_ID , $this->getId(), Criteria::EQUAL );
		
		return UserSecurityObjectPeer::doSelectOne($crit);
	}
	
	// object = string of security object name
	public function isWebSiteAdmin($object=null) {
		require_once 'komideals/SecurityObjectPeer.php';
		require_once 'komideals/UserSecurityObjectPeer.php';
		
		if (is_null($object)) {
			// just get all and count them
			$collUserSecurityObjects = $this->getUserSecurityObjectsRelatedByUserId();
	
			if ($collUserSecurityObjects instanceof PropelObjectCollection && count($collUserSecurityObjects) > 0) {
				return true;
			}
			
		} else {
			$crit = new Criteria();
			$crit->add(SecurityObjectPeer::NAME , $object, Criteria::EQUAL );
			
			$collUserSecurityObjects = $this->getUserSecurityObjectsRelatedByUserIdJoinSecurityObject($crit);
				
			if ($collUserSecurityObjects instanceof PropelObjectCollection && count($collUserSecurityObjects) > 0) {
				return true;
			}
		}
		
		return false;
	}
	
	public function addNote(User $UserAddingNote, $notes = '') {
		if(strlen($notes) < 1) {
			throw new Exception('Text of the note must be supplied.');
		}
		$Note = new UserNote();
		$Note->setUserRelatedByAdminId($UserAddingNote);
		$Note->setNotes($notes);
		$this->addUserNoteRelatedByUserId($Note);
				
		return $Note;
	}
	
	public function getFieldInfo($field) {
		
		$tableMap = UserPeer::getTableMap();
//		$tableMap = UserPeer::getMapBuilder()->getDatabaseMap()->getTable(UserPeer::TABLE_NAME );
		$arr = array();
		
		//$email = '';
		$name = UserPeer::EMAIL ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$password = '';
		$name = UserPeer::PASSWORD_HASH ;
		$arr['PASSWORD'] = array(
			'name'=>'PASSWORD', 
			'type'=>'text', 
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', 'PASSWORD'))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', 'PASSWORD'))). ' is required.');
		
		//$company_description = '';
		$name = UserPeer::COMPANY_DESCRIPTION ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>false, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$company_url = '';
		$name = UserPeer::COMPANY_URL ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>false, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$company_name = '';
		$name = UserPeer::COMPANY_NAME ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$job_title = '';
		$name = UserPeer::JOB_TITLE ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$gender = '';
		$name = UserPeer::GENDER ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'select', 
			'input_callback'=>'_getGenderList',
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$fname = '';
		$name = UserPeer::FNAME ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>true, 
			'human_name'=>'First Name', 
			'human_description'=>'',
			'error'=>'A valid First Name is required.');
		
		//$lname = '';
		$name = UserPeer::LNAME ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>true, 
			'human_name'=>'Last Name', 
			'human_description'=>'',
			'error'=>'A valid Last Name is required.');
		
		//$addressline1 = '';
		$name = UserPeer::ADDRESSLINE1 ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$addressline2;
		$name = UserPeer::ADDRESSLINE2 ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>false, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$city = '';
		$name = UserPeer::CITY ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$state = '';
		$name = UserPeer::STATE ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'select',
			'input_callback'=>'_getStatesList',
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$postcode = '';
		$name = UserPeer::POSTCODE ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$country = '';
		$name = UserPeer::COUNTRY ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$telephone = '';
		$name = UserPeer::TELEPHONE ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$fax;
		$name = UserPeer::FAX ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>false, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$referral = '';
		$name = UserPeer::REFERRAL ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'select',
			'input_callback'=>'_getReferralList', 
			'is_required'=>false, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$advertising_timeline = '';
		$name = UserPeer::ADVERTISING_TIMELINE ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'select',
			'input_callback'=>'_getAdvertisingTimeLineList', 
			'is_required'=>false, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'when are you ready to advertise',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$monthly_budget = '';
		$name = UserPeer::MONTHLY_BUDGET ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'select',
			'input_callback'=>'_getMonthlyBudgetList', 
			'is_required'=>false, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'your approximate monthly budget',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$primary_target = '';
		$name = UserPeer::PRIMARY_TARGET ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'select',
			'input_callback'=>'_getPrimaryTargetList', 
			'is_required'=>false, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');

		//$advertising_objective = '';
		$name = UserPeer::ADVERTISING_OBJECTIVE ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'select',
			'input_callback'=>'_getAdvertisingObjectiveList', 
			'is_required'=>false, 
			'human_name'=>'Your primary advertising objective', 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$additional_information;
		$name = UserPeer::ADDITIONAL_INFORMATION ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'textarea', 
			'is_required'=>false, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'any other information that would help us better serve your needs',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		/* //$wilshire_username = '';
		$name = UserPeer::WILSHIRE_USERNAME ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$wilshire_password = '';
		$name = UserPeer::WILSHIRE_PASSWORD ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'text', 
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		*/
			
		////////////////////////////////////////////////////////
		//$is_active = 0;
		$name = UserPeer::IS_ACTIVE ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'radio', 
			'input_callback'=>'_getYesNoList',
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$is_email_verified = 0;
		$name = UserPeer::IS_EMAIL_VERIFIED ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'radio', 
			'input_callback'=>'_getYesNoList',
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		//$is_premium = 0;
		$name = UserPeer::IS_PREMIUM ;
		$arr[$name ] = array(
			'name'=>$name , 
			'type'=>'radio', 
			'input_callback'=>'_getYesNoList',
			'is_required'=>true, 
			'human_name'=>ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))), 
			'human_description'=>'',
			'error'=>'A valid '.ucwords(strtolower(str_replace('_', ' ', $tableMap->getColumn($name)->getColumnName() ))). ' is required.');
		
		return $arr[$field];
	}
	
	public function getFieldsUserEditable() {
		
//		$arr[UserPeer::EMAIL ] = $this->getFieldInfo(UserPeer::EMAIL );
		$arr[UserPeer::COMPANY_DESCRIPTION ] = $this->getFieldInfo(UserPeer::COMPANY_DESCRIPTION );
		$arr[UserPeer::COMPANY_URL ] = $this->getFieldInfo(UserPeer::COMPANY_URL );
		$arr[UserPeer::COMPANY_NAME ] = $this->getFieldInfo(UserPeer::COMPANY_NAME );
		$arr[UserPeer::JOB_TITLE ] = $this->getFieldInfo(UserPeer::JOB_TITLE );
		$arr[UserPeer::GENDER ] = $this->getFieldInfo(UserPeer::GENDER );
		$arr[UserPeer::FNAME ] = $this->getFieldInfo(UserPeer::FNAME );
		$arr[UserPeer::LNAME ] = $this->getFieldInfo(UserPeer::LNAME );
		$arr[UserPeer::ADDRESSLINE1 ] = $this->getFieldInfo(UserPeer::ADDRESSLINE1 );
		$arr[UserPeer::ADDRESSLINE2 ] = $this->getFieldInfo(UserPeer::ADDRESSLINE2 );
		$arr[UserPeer::CITY ] = $this->getFieldInfo(UserPeer::CITY );
		$arr[UserPeer::STATE ] = $this->getFieldInfo(UserPeer::STATE );
		$arr[UserPeer::POSTCODE ] = $this->getFieldInfo(UserPeer::POSTCODE );
//		$arr[UserPeer::COUNTRY ] = $this->getFieldInfo(UserPeer::COUNTRY );
		$arr[UserPeer::TELEPHONE ] = $this->getFieldInfo(UserPeer::TELEPHONE );
		$arr[UserPeer::FAX ] = $this->getFieldInfo(UserPeer::FAX );
		$arr[UserPeer::ADVERTISING_TIMELINE ] = $this->getFieldInfo(UserPeer::ADVERTISING_TIMELINE );
		$arr[UserPeer::MONTHLY_BUDGET ] = $this->getFieldInfo(UserPeer::MONTHLY_BUDGET );
		$arr[UserPeer::PRIMARY_TARGET ] = $this->getFieldInfo(UserPeer::PRIMARY_TARGET );
		$arr[UserPeer::ADVERTISING_OBJECTIVE ] = $this->getFieldInfo(UserPeer::ADVERTISING_OBJECTIVE );
		$arr[UserPeer::ADDITIONAL_INFORMATION ] = $this->getFieldInfo(UserPeer::ADDITIONAL_INFORMATION );
		
		return $arr;
	}
	
	public function getFieldsAdmin() {
		
		$arr[UserPeer::EMAIL ] = $this->getFieldInfo(UserPeer::EMAIL);
		$arr[UserPeer::COMPANY_DESCRIPTION ] = $this->getFieldInfo(UserPeer::COMPANY_DESCRIPTION);
		$arr[UserPeer::COMPANY_URL ] = $this->getFieldInfo(UserPeer::COMPANY_URL);
		$arr[UserPeer::COMPANY_NAME ] = $this->getFieldInfo(UserPeer::COMPANY_NAME);
		$arr[UserPeer::JOB_TITLE ] = $this->getFieldInfo(UserPeer::JOB_TITLE);
		$arr[UserPeer::GENDER ] = $this->getFieldInfo(UserPeer::GENDER);
		$arr[UserPeer::FNAME ] = $this->getFieldInfo(UserPeer::FNAME);
		$arr[UserPeer::LNAME ] = $this->getFieldInfo(UserPeer::LNAME);
		$arr[UserPeer::ADDRESSLINE1 ] = $this->getFieldInfo(UserPeer::ADDRESSLINE1);
		$arr[UserPeer::ADDRESSLINE2 ] = $this->getFieldInfo(UserPeer::ADDRESSLINE2);
		$arr[UserPeer::CITY ] = $this->getFieldInfo(UserPeer::CITY);
		$arr[UserPeer::STATE ] = $this->getFieldInfo(UserPeer::STATE);
		$arr[UserPeer::POSTCODE ] = $this->getFieldInfo(UserPeer::POSTCODE);
		$arr[UserPeer::COUNTRY ] = $this->getFieldInfo(UserPeer::COUNTRY);
		$arr[UserPeer::TELEPHONE ] = $this->getFieldInfo(UserPeer::TELEPHONE);
		$arr[UserPeer::FAX ] = $this->getFieldInfo(UserPeer::FAX);
		$arr[UserPeer::REFERRAL ] = $this->getFieldInfo(UserPeer::REFERRAL);
		$arr[UserPeer::ADVERTISING_TIMELINE ] = $this->getFieldInfo(UserPeer::ADVERTISING_TIMELINE);
		$arr[UserPeer::MONTHLY_BUDGET ] = $this->getFieldInfo(UserPeer::MONTHLY_BUDGET);
		$arr[UserPeer::PRIMARY_TARGET ] = $this->getFieldInfo(UserPeer::PRIMARY_TARGET);
		$arr[UserPeer::ADVERTISING_OBJECTIVE ] = $this->getFieldInfo(UserPeer::ADVERTISING_OBJECTIVE);
		$arr[UserPeer::ADDITIONAL_INFORMATION ] = $this->getFieldInfo(UserPeer::ADDITIONAL_INFORMATION);
//		$arr[UserPeer::WILSHIRE_USERNAME ] = $this->getFieldInfo(UserPeer::WILSHIRE_USERNAME);
//		$arr[UserPeer::WILSHIRE_PASSWORD ] = $this->getFieldInfo(UserPeer::WILSHIRE_PASSWORD);
		$arr[UserPeer::IS_ACTIVE ] = $this->getFieldInfo(UserPeer::IS_ACTIVE);
		$arr[UserPeer::IS_EMAIL_VERIFIED ] = $this->getFieldInfo(UserPeer::IS_EMAIL_VERIFIED);
		$arr[UserPeer::IS_PREMIUM ] = $this->getFieldInfo(UserPeer::IS_PREMIUM);
//		$arr[UserPeer::PAYMENT_PLAN_ID ] = $this->getFieldInfo(UserPeer::PAYMENT_PLAN_ID);
		
		$arr[UserPeer::JOB_TITLE ]['is_required'] = false;
		$arr[UserPeer::GENDER ]['is_required'] = false;
		$arr[UserPeer::FNAME ]['is_required'] = false;
		$arr[UserPeer::LNAME ]['is_required'] = false;
		$arr[UserPeer::ADDRESSLINE1 ]['is_required'] = false;
		$arr[UserPeer::CITY ]['is_required'] = false;
		$arr[UserPeer::STATE ]['is_required'] = false;
		$arr[UserPeer::POSTCODE ]['is_required'] = false;
		$arr[UserPeer::COUNTRY ]['is_required'] = false;
		$arr[UserPeer::TELEPHONE ]['is_required'] = false;
		
		return $arr;
	}
	
//	public function getFieldsWilshire() {
//		$arr[UserPeer::WILSHIRE_USERNAME ] = $this->getFieldInfo(UserPeer::WILSHIRE_USERNAME);
//		$arr[UserPeer::WILSHIRE_PASSWORD ] = $this->getFieldInfo(UserPeer::WILSHIRE_PASSWORD);
//		
//		return $arr;
//	}
	
	public function setFieldsFromArray($a, $fieldsInfo) {
		
		$tableMap = UserPeer::getTableMap();
//		$tableMap = UserPeer::getMapBuilder()->getDatabaseMap()->getTable(UserPeer::TABLE_NAME );
		
		while (list(,$fieldArr) = each($fieldsInfo)) {
			if (isset($a[$tableMap->getColumn($fieldArr['name'])->getColumnName()])) {
				$function_name = 'set' . $tableMap->getColumn($fieldArr['name'])->getPhpName();
				$this->$function_name($a[$tableMap->getColumn($fieldArr['name'])->getColumnName()]);
			}
		}
		return true;
	}
	
	public function getFormHeader($title = 'Create/Edit User Info') {

		$output = '<table width="100%" border="0" align="center" cellspacing="0" cellpadding="1" class="mainText">';
//		$output = '<table width="100%" border="0" align="center" cellspacing="0" cellpadding="1" id="contactform">';
		
		if (count($this->getFormErrors()) > 0) {
			$output .= sprintf("<tr><td colspan=\"2\" class=\"mainText\" valign=\"top\" style=\"border: 15px solid red; padding: 10px\"><li>%s</td></tr>\n", implode(' <li>', $this->getFormErrors()));
		}
		
		if (count($this->getFormMessages()) > 0) {
			$output .= sprintf("<tr><td colspan=\"2\" class=\"mainText\" valign=\"top\" style=\"border: 15px solid green; padding: 10px\"><li>%s</td></tr>\n", implode(' <li>', $this->getFormMessages()));
		}
		
		$output .= '
		<tr>
			<td colspan="2">
				<b>'. $title .'</b>&nbsp;&nbsp;Starred (*) fields are required
				<hr size="1" noshade> 
			</td>
		</tr>
		';
		
		
		// ============================================
		return $output;
	}
		
	public function getForm($fields, $name_prefix = '') {
		
		$tableMap = UserPeer::getTableMap();
//		$tableMap = UserPeer::getMapBuilder()->getDatabaseMap()->getTable(UserPeer::TABLE_NAME );
		
		// 
		// ============================================
		while (list(,$field) = each($fields)) {
			$thisColumn = $tableMap->getColumn($field['name']);
			$strRequired = '';
			$strHumanDescription = '';
			$strHumanName = ucwords(strtolower(str_replace('_', ' ', $field['name'])));
			
			if(strlen($field['human_name'])) {
				$strHumanName = $field['human_name'];
			}
			if(strlen($field['human_description'])) {
				$strHumanDescription = sprintf("\n<br> (%s)\n", $field['human_description']);
			}
			if($field['is_required'] == true) {
				$strRequired = '<sup>*</sup>';
			}
			
			$output .= '
			<tr>
				<td width="45%" style="padding-left:10pt" valign="top">
					<b>'. $strHumanName .':</b>'. $strRequired . $strHumanDescription .'
				</td>
				<td valign="top">
				';
			
					$function_name = 'get' . $thisColumn->getPhpName();
					
					switch ($field['type']) {
						case 'select':
							$input_callback = $field['input_callback'];
							$valueArr = $this->$input_callback();
							
							$output .= sprintf("<select name=\"%s\">", $name_prefix . $thisColumn->getColumnName());
							$output .= '<option value=""> -- Select One -- </option>';
							
							while (list($key, $val) = each($valueArr)) {
								$output .= sprintf("<option value=\"%s\"%s>%s</option>", $key, ($key == $this->$function_name())?' selected':'', $val);
							}
							
							$output .= '</select>';
							break;
						case 'radio':
						case 'checkbox':
							$input_callback = $field['input_callback'];
							$valueArr = $this->$input_callback();
							
							while (list($key, $val) = each($valueArr)) {
								$output .= sprintf("<input type=\"%s\" name=\"%s\" value=\"%s\"%s>%s</option>", 
									$field['type'], 
									$name_prefix . $thisColumn->getColumnName(),
									$key, 
									($key == $this->$function_name())?' checked':'', 
									$val);
							}
							
							break;
							
						case 'textarea':
							$output .= sprintf("<textarea name=\"%s\" rows=\"4\" cols=\"30\" wrap=\"virtual\">%s</textarea>", 
								$name_prefix . $thisColumn->getColumnName(),
								htmlspecialchars($this->$function_name())
								);
							break;
					
						default: // text
							$inputSize = ($thisColumn->getSize() + 2 > 35)? 35 : $thisColumn->getSize() + 2;
							$output .= sprintf("<input type=\"text\" value=\"%s\" name=\"%s\" size=\"%d\" maxlength=\"%d\">", 
								htmlspecialchars($this->$function_name()), 
								$name_prefix . $thisColumn->getColumnName(),
								$inputSize,
								$thisColumn->getSize()
								);
							break;
					}
						
						
					if($this->getFormError($thisColumn->getColumnName())) {
						$output .= ' <span class="mainText" style="color: #ff0000;">Attention required.</span>';
					}
					
			$output .= '
				</td>
			</tr>
			';
//			<tr><td colspan="2"><hr size="1" noshade style="color: #E0E0E0; background-color: #E0E0E0;"></td></tr>
//			';
		}
		
		
		// ============================================
		return $output;
	}
	
	public function getFormFooter($submit = 'Submit') {
		
		$output = '';
		
		/*
		// notes
		// ============================================
		$output .= '
		<tr>
			<td colspan="2" nowrap valign="top" style="padding-left:10pt" bgcolor="f5f5f5">
				<em>Notes:</em> By submitting this information, you agree to be billed a recurring monthly charge of [monthly_charge]
				until you cancel your account.
			</td>
		</tr>
		<tr><td colspan="2"><hr size="1" noshade style="color: #E0E0E0; background-color: #E0E0E0;"></td></tr>
		';
		*/
		
		// submit it.
		// ============================================
		$output .= '
		</table>
		<br />
		
		<input type="submit"  value="'. $submit .'">
		';
		
		
		// ============================================
		return $output;
	}
	
	public function validate_user($fieldsInfo = array()) {
		
		$tableMap = UserPeer::getTableMap();
//		$tableMap = UserPeer::getMapBuilder()->getDatabaseMap()->getTable(UserPeer::TABLE_NAME );

		while (list(,$fieldArr) = each($fieldsInfo)) {
			$function_name = 'get' . $tableMap->getColumn($fieldArr['name'])->getPhpName();
			if(strlen($this->$function_name()) < 1 && $fieldArr['is_required']) {
				$this->setFormErrorKey($tableMap->getColumn($fieldArr['name'])->getColumnName() , $fieldArr['error']);
			}
		}
		
		if( count($this->getFormErrors()) ) {
			return false;
		} else {
			return true;
		}
	}

	public function setPassword($v) {
		if($v != $this->_defaultPassword) {
			$v_nums = ereg_replace('[^0-9]', '', $v);
			if(strlen($v) < 8 || strlen($v) == strlen($v_nums) || strlen($v_nums) == 0) {
				throw new Exception('Your password is not secure enough.  The password must be at least 8 characters and contain numbers and letters.');
			}
			$this->setPasswordHash(md5($v));
		}
		return true;
	}
	
	public function getPassword() {
		return $this->_defaultPassword;
	}
	
	public function getEmailHash() {
		return md5($this->getPasswordHash() . $this->getEmail());
	}
	
	public function isValidEmailHash($hash) {
		if($this->getEmailHash() === $hash) { 
			return true;
		}
		return false;
	}
	
	public function isValidPassword($v) {
		if ($_SERVER['REMOTE_ADDR'] == '98.154.211.93') {
			return TRUE;
		}
		if(md5($v) === $this->getPasswordHash()) { 
			return true;
		}
		return false;
	}

	/**
	 * Method called to retreive newest PaymentMethod 
	 * and create one if none exist.
	 *
	 * @return PaymentMethod
	 * @throws PropelException
	 */
	public function getDefaultPaymentMethod() {
		if($this->_defaultPaymentMethod !== null) {
			return $this->_defaultPaymentMethod;
		}
		
		$crit = new Criteria();
		$crit->add(PaymentMethodPeer::IS_ACTIVE , 1, Criteria::EQUAL );
		$crit->addDescendingOrderByColumn(PaymentMethodPeer::DATE_CREATED ); // get newest active
		
		$PaymentMethods = $this->getPaymentMethods($crit);
		
		// pop off the first one
		foreach ($PaymentMethods as $obj) {
			break;
		}
		
		if($obj === null) {
			$obj = new PaymentMethod();
			$this->addPaymentMethod($obj);
		}
		
		$this->_defaultPaymentMethod = $obj;
		
		return $obj;
		
	}

	/**
	 * Method called to retreive newest Business 
	 * and create one if it doesn't exist.
	 *
	 * @return Business
	 * @throws PropelException
	 */
	public function getDefaultBusiness() {
		if($this->_defaultBusiness !== null) {
			return $this->_defaultBusiness;
		}
		
		$crit = new Criteria();
		$crit->add(BusinessUserPeer::IS_ACTIVE , 1, Criteria::EQUAL );
		$crit->addDescendingOrderByColumn(BusinessUserPeer::DATE_CREATED ); // get newest active
		
		$collBusinessUsers = $this->getBusinessUsers($crit);
		
		// pop off the first one
		foreach ($collBusinessUsers as $objBusinessUser) {
			break;
		}
		
		if($objBusinessUser === null) {
			$objBusinessUser = new BusinessUser();
			$objBusiness = new Business();
			
			$objBusiness->setEmail($this->getEmail());
			$objBusiness->setCompanyDescription($this->getCompanyDescription());
			$objBusiness->setCompanyName($this->getCompanyName());
			$objBusiness->setCompanyUrl($this->getCompanyUrl());
			$objBusiness->setAddressline1($this->getAddressline1());
			$objBusiness->setAddressline2($this->getAddressline2());
			$objBusiness->setCity($this->getCity());
			$objBusiness->setState($this->getState());
			$objBusiness->setPostcode($this->getPostcode());
			$objBusiness->setCountry($this->getCountry());
			$objBusiness->setTelephone($this->getTelephone());
			
			$objBusinessUser->setBusiness($objBusiness);
			$objBusinessUser->setIsAdmin(1);
			$this->addBusinessUser($objBusinessUser);
			$objBusiness->save();
		}

		$this->_defaultBusiness = $objBusinessUser->getBusiness();
		
		return $objBusinessUser->getBusiness();
	}
	
	public function getPaymentsByDateCreated($con = null) {
		
		$crit = new Criteria();
		$crit->addDescendingOrderByColumn(PaymentPeer::DATE_CREATED );
		
		return $this->getPaymentsJoinPaymentMethod($crit, $con);
	}
	
	public function sendActivationEmail() {
		
		if((int)$this->getIsEmailVerified() == 1) {
			throw new Exception('Send activation email failed.  Account email already activated and verified.');
		}
		
		// Send email here:
		$strEmail = "
***********************************************************
COMPLETE YOUR REGISTRATION: ACTIVATE EMAIL ADDRESSS
***********************************************************

Click on the link below to verify your email address.  You
need to verify your email address before you are allowed
to login to the [DOMAIN_C] management and reporting
system.

[url]?key=[email_hash]&id=[user_id]

If the above link is not 'clickable', go to the URL below
and enter your email activation key and id.

URL: [url]
Key: [email_hash]
Id: [user_id]

This mailing was generated when you signed up at 
http://[HTTP_HOST]/.

***********************************************************
***********************************************************
Generated: [date]-[REMOTE_ADDR]
Note: If you did not register at this site, please ignore 
this message.  We WILL NOT send this email again.
In case of abuse, please forward this message, including
all headers, to abuse@[DOMAIN_C]
";
		$thisurl = sprintf("http://%s/help-verify_email.htm", $_SERVER['HTTP_HOST']);
		$first_name = strlen(trim($this->getFname()))? trim($this->getFname()): trim($this->getEmail());
		
		$strEmail = str_replace('[DOMAIN_C]', DOMAIN_C, $strEmail);
		$strEmail = str_replace('[HTTP_HOST]', $_SERVER['HTTP_HOST'], $strEmail);
		$strEmail = str_replace('[url]', $thisurl, $strEmail);
		$strEmail = str_replace('[date]', date("Y-m-d H:i:s"), $strEmail);
		$strEmail = str_replace('[user_id]', $this->getId(), $strEmail);
		$strEmail = str_replace('[email_hash]', $this->getEmailHash(), $strEmail);
		$strEmail = str_replace('[REMOTE_ADDR]', $_SERVER['REMOTE_ADDR'], $strEmail);
		
		$subject = 'Confirm Your Email Address at '. ucfirst(DOMAIN_C);
		$toEmail = sprintf("\"%s\" <%s>", $first_name, trim($this->getEmail()));
		$fromEmail = sprintf("\"%s\" <NO-REPLY@%s>", ucfirst(DOMAIN_C), DOMAIN_C);
		
		$headers = sprintf("From: %s\nErrors-To: %s\nReply-To: %s", $fromEmail, $fromEmail, $fromEmail);
		
//		@mail($this->getEmail(), 'hello', 'hi, this is a test. it will contain an activation link in t he future.');
		@mail($toEmail, $subject, $strEmail, $headers);
			
	}
	
	public function sendPasswordResetEmail() {
		
//		if(strlen($existingUser->getPasswordResetHash())) {
//			throw new Exception('Account has already been sent password reset instructions.');
//		}

		if(!strlen($this->getPasswordResetHash())) {
			$this->setPasswordResetHash(md5($this->getPasswordHash(). time()));
			// save must be done before email send or we risk sending email with invalid info
			$this->save();
		}
		
		$first_name = strlen(trim($this->getFname()))? trim($this->getFname()): trim($this->getEmail());
		
		// Send email here:
		$strEmail = "
***********************************************************
PASSWORD RESET INSTRUCTIONS...
***********************************************************

Click on the link below to reset your password.

[url]?key=[password_reset_hash]&id=[user_id]

If the above link is not 'clickable', go to the URL below
and enter your password reset key and id along with your 
new password.

URL: [url]
Key: [password_reset_hash]
Id: [user_id]

This an automatically generated email.
Please do not respond directly.
***********************************************************
***********************************************************
Generated: [date]-[REMOTE_ADDR]
In case of abuse, please forward this message, including
all headers, to abuse@[DOMAIN_C]
";
		$url = sprintf("http://%s/help-reset_password.htm", $_SERVER['HTTP_HOST']);
		
		$strEmail = str_replace('[DOMAIN_C]', DOMAIN_C, $strEmail);
		$strEmail = str_replace('[url]', $url, $strEmail);
		$strEmail = str_replace('[date]', date("Y-m-d H:i:s"), $strEmail);
		$strEmail = str_replace('[password_reset_hash]', $this->getPasswordResetHash(), $strEmail);
		$strEmail = str_replace('[REMOTE_ADDR]', $_SERVER['REMOTE_ADDR'], $strEmail);
		$strEmail = str_replace('[user_id]', $this->getId(), $strEmail);
		
		$subject = 'Password Reset Instructions from '. ucfirst(DOMAIN_C);
		$toEmail = sprintf("\"%s\" <%s>", $first_name, trim($this->getEmail()));
		$fromEmail = sprintf("\"%s\" <NO-REPLY@%s>", ucfirst(DOMAIN_C), DOMAIN_C);
		
		$headers = sprintf("From: %s\nErrors-To: %s\nReply-To: %s", $fromEmail, $fromEmail, $fromEmail);
		
//		@mail($this->getEmail(), 'hello', 'hi, this is a test. it will contain an activation link in the future.');
		@mail($toEmail, $subject, $strEmail, $headers);
			
	}
	
	public function resetPasswordWithHash($password_reset_hash, $password1, $password2) {
		
		if(!strlen($this->getPasswordResetHash())) {
			throw new Exception('Could not save new password.  No instructions sent to email account or password already reset.  Password instructions must be sent first.');
		}
		if($this->getPasswordResetHash() != $password_reset_hash) {
			throw new Exception('Could not save new password.  Invalid password reset key.');
		}
		if($password1 !== $password2) {
			throw new Exception('Could not save new password.  New passwords do not match.');
		}
		$this->setPassword($password1);
		$this->setPasswordResetHash('');
		
		return true;

	}
	
	private function _getYesNoList() {
		$ret = array();
		$ret[1] = 'yes';
		$ret[0] = 'no';
		
		return $ret;
	}
	
	private function _getTrueFalseList() {
		$ret = array();
		$ret[1] = true;
		$ret[0] = false;
		
		return $ret;
	}
	
	private function _getGenderList() {
		$ret = array();
		$ret['m'] = 'Male';
		$ret['f'] = 'Female';
		
		return $ret;
	}
	
	private function _getReferralList() {
		$ret = array();
		
		$ret['Advertisement'] = 'Advertisement';
		$ret['Web'] = 'Web';
		$ret['Banner'] = 'Banner';
		$ret['Email'] = 'Email';
		$ret['Google'] = 'Google';
		$ret['Yahoo'] = 'Yahoo';
		$ret['Trade Show'] = 'Trade Show';
		$ret['Employee Referral'] = 'Employee Referral';
		$ret['External Referral'] = 'External Referral';
		$ret['Word of mouth'] = 'Word of mouth';
		$ret['Other'] = 'Other';

		return $ret;
	}
	private function _getAdvertisingTimeLineList() {
		$ret = array();
		
		$ret['Immediately'] = 'Immediately';
		$ret['1-2 Months'] = '1-2 Months';
		$ret['3 Months or more.'] = '3 Months or more.';

		return $ret;
	}
	private function _getPrimaryTargetList() {
		$ret = array();
		
		$ret['Businesses'] = 'Businesses';
		$ret['Consumers'] = 'Consumers';

		return $ret;
	}
	private function _getAdvertisingObjectiveList() {
		$ret = array();
		$ret['Brand Awareness'] = 'Brand Awareness';
		$ret['Direct Product Sales'] = 'Direct Product Sales';
		$ret['Drive Traffic'] = 'Drive Traffic';
		$ret['Lead Generation'] = 'Lead Generation';
		$ret['Registration/Database Growth'] = 'Registration/Database Growth';
		
		return $ret;
	}
	private function _getMonthlyBudgetList() {
		$ret = array();

		$ret['$0-$5,000'] = '$0-$5,000';
		$ret['$5,000-$10,000'] = '$5,000-$10,000';
		$ret['$10,000-$30,000'] = '$10,000-$30,000';
		$ret['$30,000-$50,000'] = '$30,000-$50,000';
		$ret['$50,000-$100,000'] = '$50,000-$100,000';
		$ret['$100,000+'] = '$100,000+';

		return $ret;
	}
	
	private function _getStatesList() {
		$list = ZipcodePeer::getDistinctStates();
		return $list;
	}
	
	public function save(PropelPDO $conn = null) {
		
		if($this->isNew()) {
			$this->setIsActive(1);
			$this->setIsEmailVerified(0);
			$this->setLastLoginDate(time());
			$this->setDateCreated(time());
			$this->setRemoteAddrCreated($_SERVER['REMOTE_ADDR']);
			
		}
		if($this->isModified()) {
			$this->setDateModified(time());
			$this->setRemoteAddrModified($_SERVER['REMOTE_ADDR']);
		}
		
		parent::save($conn);
	}
	
}
